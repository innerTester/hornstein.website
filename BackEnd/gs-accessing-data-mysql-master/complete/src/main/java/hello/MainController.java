package hello;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.List;

import javax.mail.MessagingException;
import javax.mail.Session;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import email.resource.Sender;
import modules.*;
import hello.UserRepository;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;
	
	@GetMapping(path="/add") // Map ONLY GET Requests
	public @ResponseBody String addNewUser (@RequestParam String email
			, @RequestParam String password, @RequestParam String phone) throws MessagingException, FileNotFoundException, IOException, GeneralSecurityException {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		
		Session welcome= Sender.authorizeWebShopEmail();
		
		
		
		Sender.sendMail(welcome, email);
		
		modules.User n= new modules.User();
		n.setEmail(email);
		n.setPassword(password);
		n.setPhone(phone);
		userRepository.save(n);
		return "Saved";
	}
	
	@GetMapping(path="/all")
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}
	
	@GetMapping(path="/login")
	public @ResponseBody Iterable<User> loginUser(@RequestParam String email){
		
		List<User> name = userRepository.findByEmail(email);
		System.out.println(name.iterator().toString());
		
		return userRepository.findByEmail(email);
	}
}
